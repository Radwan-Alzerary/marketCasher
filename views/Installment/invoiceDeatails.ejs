<%- include('../header.ejs') %>
    <!-- Main Content -->
    <main class="container mx-auto py-6 px-4">
        <div class="bg-white p-6 rounded-lg shadow-md">
            <!-- Invoice Details -->
            <div class="mb-4">
                <button onclick="window.history.back()" 
                    class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-500 transition-colors duration-200 flex items-center">
                    <!-- Back Icon -->
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                    العودة
                </button>
            </div>
            
            <h2 id="invoice-title" class="text-2xl font-bold mb-4">فاتورة</h2>
            <p id="client-name" class="mb-2 flex items-center">
                <!-- User Icon -->
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600 ml-2" fill="none"
                    viewBox="0 0 24 24" stroke="currentColor">
                    <!-- SVG Path -->
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M5.121 17.804A13.937 13.937 0 0112 15c2.179 0 4.208.414 6.121 1.204M15 10a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
                <span>العميل: <span id="client-name-value">جارٍ التحميل...</span></span>
            </p>
            <p id="invoice-date" class="mb-2 flex items-center">
                <!-- Calendar Icon -->
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600 ml-2" fill="none"
                    viewBox="0 0 24 24" stroke="currentColor">
                    <!-- SVG Path -->
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                <span>التاريخ: <span id="invoice-date-value">جارٍ التحميل...</span></span>
            </p>
            <p id="invoice-total" class="mb-2 flex items-center">
                <!-- Money Icon -->
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600 ml-2" fill="none"
                    viewBox="0 0 24 24" stroke="currentColor">
                    <!-- SVG Path -->
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M12 8c1.657 0 3 1.343 3 3s-1.343 3-3 3-3-1.343-3-3 1.343-3 3-3zM6 6v12M18 6v12M4 10h16M4 14h16" />
                </svg>
                <span>المبلغ الإجمالي: <span id="invoice-total-value">جارٍ التحميل...</span> د.ع</span>
            </p>
            <p id="invoice-paid" class="mb-2 flex items-center">
                <!-- Currency Icon -->
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600 ml-2" fill="none"
                    viewBox="0 0 24 24" stroke="currentColor">
                    <!-- SVG Path -->
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-2M12 7v6l4 2" />
                </svg>
                <span>المدفوع: <span id="invoice-paid-value">جارٍ التحميل...</span> د.ع</span>
            </p>
            <p id="invoice-remaining" class="mb-4 flex items-center">
                <!-- Money Icon -->
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600 ml-2" fill="none"
                    viewBox="0 0 24 24" stroke="currentColor">
                    <!-- SVG Path -->
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M12 8c1.657 0 3 1.343 3 3s-1.343 3-3 3-3-1.343-3-3 1.343-3 3-3zM6 6v12M18 6v12M4 10h16M4 14h16" />
                </svg>
                <span>الرصيد المتبقي: <span id="invoice-remaining-value">جارٍ التحميل...</span> د.ع</span>
            </p>
            <span id="invoice-status" class="inline-block px-2 py-1 text-xs font-semibold rounded mb-6">
                <!-- Status will be updated via JavaScript -->
            </span>

            <!-- Products List -->
            <h3 class="text-xl font-bold mb-2">المنتجات:</h3>
            <table class="w-full mb-6">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="py-2 px-4">المنتج</th>
                        <th class="py-2 px-4">الكمية</th>
                        <th class="py-2 px-4">السعر</th>
                        <th class="py-2 px-4">الإجمالي</th>
                    </tr>
                </thead>
                <tbody id="products-table-body">
                    <!-- Products will be populated here -->
                </tbody>
            </table>

            <!-- Payments Table -->
            <h3 class="text-xl font-bold mb-2">جدول الدفعات المجدولة:</h3>
            <table class="w-full mb-6">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="py-2 px-4">نوع الدفع</th>
                        <th class="py-2 px-4">تاريخ الدفع</th>
                        <th class="py-2 px-4">المبلغ</th>
                        <th class="py-2 px-4">الحالة</th>
                        <th class="py-2 px-4">إجراء</th>
                    </tr>
                </thead>
                <tbody id="payments-table-body">
                    <!-- Payments will be populated here -->
                </tbody>
            </table>

            <!-- Payments Transfer Table -->
            <h3 class="text-xl font-bold mb-2">الدفعات المستلمة:</h3>
            <table class="w-full mb-6">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="py-2 px-4">نوع الدفع</th>
                        <th class="py-2 px-4">تاريخ الاستلام</th>
                        <th class="py-2 px-4">المبلغ</th>
                    </tr>
                </thead>
                <tbody id="payments-transfer-table-body">
                    <!-- Payments transfer will be populated here -->
                </tbody>
            </table>

            <!-- Payment Form -->
            <div class="mb-6">
                <button onclick="togglePaymentForm()"
                    class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-500 transition-colors duration-200 flex items-center">
                    <!-- Money Icon -->
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24"
                        stroke="currentColor">
                        <!-- SVG Path -->
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M12 8c1.657 0 3 1.343 3 3s-1.343 3-3 3-3-1.343-3-3 1.343-3 3-3zM6 6v12M18 6v12M4 10h16M4 14h16" />
                    </svg>
                    دفع مبلغ
                </button>
            </div>

            <div id="payment-form-container" class="hidden mb-6">
                <h3 class="text-xl font-bold mb-2">إدخال مبلغ الدفع:</h3>
                <form id="payment-form">
                    <div class="mb-4">
                        <label for="payment-amount" class="block text-gray-700">المبلغ:</label>
                        <input type="number" id="payment-amount" name="paymentAmount" min="0" step="0.01"
                            class="w-full px-3 py-2 border rounded" required>
                    </div>
                    <button type="submit"
                        class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-500 transition-colors duration-200">
                        تأكيد الدفع
                    </button>
                </form>
            </div>

            <!-- Print Invoice Button -->
            <div>
                <button onclick="printInvoice()"
                    class="bg-gray-800 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition-colors duration-200 flex items-center">
                    <!-- Print Icon -->
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24"
                        stroke="currentColor">
                        <!-- SVG Path -->
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M6 9H4a2 2 0 00-2 2v8a2 2 0 002 2h16a2 2 0 002-2v-8a2 2 0 00-2-2h-2M6 9V7a2 2 0 012-2h8a2 2 0 012 2v2M6 9h12m-6 4v4m-3-4h6" />
                    </svg>
                    طباعة الفاتورة
                </button>
            </div>
        </div>
    </main>


    <!-- JavaScript to Fetch and Display Data -->
    <script>
        let invoiceId = null; // Global variable to store invoice ID
        let installmentId = null; // Global variable to store installment ID

        // Function to fetch invoice data
        async function fetchInvoiceData() {
            try {
                // Extract invoice ID from the URL path
                const pathSegments = window.location.pathname.split('/');
                invoiceId = pathSegments[pathSegments.length - 1];

                if (!invoiceId) {
                    alert('معرف الفاتورة غير موجود في عنوان URL');
                    return;
                }

                // Fetch invoice data from the server
                const response = await fetch(`/Installment/info/${invoiceId}`);
                if (!response.ok) {
                    throw new Error('فشل في جلب بيانات الفاتورة');
                }

                const data = await response.json();
                const { invoice, client } = data;

                // Update the HTML elements with fetched data
                document.getElementById('invoice-title').textContent = `فاتورة #${invoice.number || 'غير متوفر'}`;
                document.getElementById('client-name-value').textContent = client ? client.name : 'غير معروف';
                document.getElementById('invoice-date-value').textContent = formatDate(invoice.createdAt);
                document.getElementById('invoice-total-value').textContent = invoice.finalcost || 'غير متوفر';
                document.getElementById('invoice-paid-value').textContent = calculatePaidAmount(invoice.installmentInvoice) || 'غير متوفر';
                document.getElementById('invoice-remaining-value').textContent = calculateRemainingAmount(invoice.installmentInvoice) || 'غير متوفر';
                // Update invoice status
                const statusElement = document.getElementById('invoice-status');
                const remainingAmount = calculateRemainingAmount(invoice.installmentInvoice);
                console.log(remainingAmount)

                const status = remainingAmount > 0 ? 'متأخر' : 'مدفوع';
                statusElement.textContent = status;
                statusElement.className = `inline-block px-2 py-1 text-xs font-semibold rounded mb-6 ${status === 'متأخر' ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}`;

                // Populate products table
                populateProductsTable(invoice.food);

                // Store the installment ID
                installmentId = invoice.installmentInvoice ? invoice.installmentInvoice._id : null;

                // Populate payments table
                if (invoice.installmentInvoice && invoice.installmentInvoice.payments) {
                    populatePaymentsTable(invoice.installmentInvoice.payments);
                }

                // Populate payments transfer table
                if (invoice.installmentInvoice && invoice.installmentInvoice.paymentsTransfer) {
                    populatePaymentsTransferTable(invoice.installmentInvoice.paymentsTransfer);
                }

            } catch (error) {
                console.error(error);
                alert('حدث خطأ أثناء جلب بيانات الفاتورة');
            }
        }

        // Helper function to format dates
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('ar-EG');
        }

        // Helper function to calculate paid amount
        function calculatePaidAmount(installment) {
            if (!installment || !installment.paymentsTransfer) return 0;
            return installment.paymentsTransfer.reduce((sum, payment) => sum + (payment.amount || 0), 0);
        }

        // Helper function to calculate remaining amount
        function calculateRemainingAmount(installment) {
            if (!installment) return 0;
            const totalAmount = installment.totalAmount || 0;
            const paidAmount = calculatePaidAmount(installment);
            return totalAmount - paidAmount;
        }

        // Function to populate the products table
        function populateProductsTable(products) {
            const tbody = document.getElementById('products-table-body');
            tbody.innerHTML = ''; // Clear any existing rows

            products.forEach(product => {
                const tr = document.createElement('tr');
                console.log(product)
                // Product Name
                const nameTd = document.createElement('td');
                nameTd.className = 'py-2 px-4 border-b';
                nameTd.textContent = product.id?.name || 'غير متوفر';
                tr.appendChild(nameTd);

                // Quantity
                const qtyTd = document.createElement('td');
                qtyTd.className = 'py-2 px-4 border-b text-center';
                qtyTd.textContent = product.quantity || 0;
                tr.appendChild(qtyTd);

                // Price
                const priceTd = document.createElement('td');
                priceTd.className = 'py-2 px-4 border-b text-center';
                priceTd.textContent = product.foodPrice || 0;
                tr.appendChild(priceTd);

                // Total
                const totalTd = document.createElement('td');
                totalTd.className = 'py-2 px-4 border-b text-center';
                const total = (product.foodPrice || 0) * (product.quantity || 0);
                totalTd.textContent = total;
                tr.appendChild(totalTd);

                tbody.appendChild(tr);
            });
        }

        // Function to populate the payments table
        function populatePaymentsTable(payments) {
            const tbody = document.getElementById('payments-table-body');
            tbody.innerHTML = ''; // Clear existing rows

            payments.forEach((payment, index) => {
                const tr = document.createElement('tr');

                // Payment Type
                const typeTd = document.createElement('td');
                typeTd.className = 'py-2 px-4 border-b';
                typeTd.textContent = payment.paymentType || 'غير متوفر';
                tr.appendChild(typeTd);

                // Payment Date
                const dateTd = document.createElement('td');
                dateTd.className = 'py-2 px-4 border-b text-center';
                dateTd.textContent = formatDate(payment.date);
                tr.appendChild(dateTd);

                // Amount
                const amountTd = document.createElement('td');
                amountTd.className = 'py-2 px-4 border-b text-center';
                amountTd.textContent = payment.amount || 0;
                tr.appendChild(amountTd);

                // Status
                const statusTd = document.createElement('td');
                statusTd.className = 'py-2 px-4 border-b text-center';
                statusTd.textContent = payment.isPaid ? 'مدفوع' : 'غير مدفوع';
                tr.appendChild(statusTd);

                // Action
                const actionTd = document.createElement('td');
                actionTd.className = 'py-2 px-4 border-b text-center';
                if (!payment.isPaid) {
                    const payButton = document.createElement('button');
                    payButton.textContent = 'دفع';
                    payButton.className = 'bg-green-600 text-white px-2 py-1 rounded hover:bg-green-500';
                    payButton.onclick = () => makeScheduledPayment(index, payment.amount);
                    actionTd.appendChild(payButton);
                } else {
                    actionTd.textContent = '---';
                }
                tr.appendChild(actionTd);

                tbody.appendChild(tr);
            });
        }

        // Function to populate the payments transfer table
        function populatePaymentsTransferTable(paymentsTransfer) {
            const tbody = document.getElementById('payments-transfer-table-body');
            tbody.innerHTML = ''; // Clear existing rows

            paymentsTransfer.forEach((payment) => {
                const tr = document.createElement('tr');

                // Payment Type
                const typeTd = document.createElement('td');
                typeTd.className = 'py-2 px-4 border-b';
                typeTd.textContent = payment.paymentType || 'دفعة';
                tr.appendChild(typeTd);

                // Date of Payment
                const dateTd = document.createElement('td');
                dateTd.className = 'py-2 px-4 border-b text-center';
                dateTd.textContent = formatDate(payment.dateOfPayment);
                tr.appendChild(dateTd);

                // Amount
                const amountTd = document.createElement('td');
                amountTd.className = 'py-2 px-4 border-b text-center';
                amountTd.textContent = payment.amount || 0;
                tr.appendChild(amountTd);

                tbody.appendChild(tr);
            });
        }

        // Function to make a scheduled payment
        async function makeScheduledPayment(paymentIndex, paymentAmount) {
            if (!installmentId) {
                alert('لا يوجد معرف للتقسيط');
                return;
            }

            try {
                // Send payment data to the server
                const response = await fetch('/Installment/payment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        installmentId: installmentId,
                        paymentAmount: paymentAmount,
                        paymentIndex: paymentIndex,
                    }),
                });

                if (!response.ok) {
                    throw new Error('فشل في معالجة الدفع');
                }

                const result = await response.json();

                if (result.success) {
                    alert('تمت عملية الدفع بنجاح');
                    // Refresh the page or update the displayed data
                    fetchInvoiceData();
                } else {
                    alert(`حدث خطأ: ${result.message}`);
                }
            } catch (error) {
                console.error(error);
                alert('حدث خطأ أثناء معالجة الدفع');
            }
        }

        // Function to toggle the payment form visibility
        function togglePaymentForm() {
            const paymentFormContainer = document.getElementById('payment-form-container');
            paymentFormContainer.classList.toggle('hidden');
        }

        // Function to handle payment form submission
        async function handlePaymentFormSubmit(event) {
            event.preventDefault();

            const paymentAmount = parseFloat(document.getElementById('payment-amount').value);

            if (isNaN(paymentAmount) || paymentAmount <= 0) {
                alert('الرجاء إدخال مبلغ صالح');
                return;
            }

            if (!installmentId) {
                alert('لا يوجد معرف للتقسيط');
                return;
            }

            try {
                // Send payment data to the server
                const response = await fetch('/Installment/payment/direct', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        installmentId: installmentId,
                        paymentAmount: paymentAmount,
                    }),
                });

                if (!response.ok) {
                    throw new Error('فشل في معالجة الدفع');
                }

                const result = await response.json();

                if (result.success) {
                    alert('تمت عملية الدفع بنجاح');
                    // Refresh the page or update the displayed data
                    fetchInvoiceData();
                    // Hide the payment form
                    togglePaymentForm();
                } else {
                    alert(`حدث خطأ: ${result.message}`);
                }
            } catch (error) {
                console.error(error);
                alert('حدث خطأ أثناء معالجة الدفع');
            }
        }

        // Function to print the invoice
        function printInvoice() {
            // Clone the invoice details section
            const invoiceDetails = document.querySelector('.bg-white.p-6');
            if (!invoiceDetails) {
                console.error("Invoice details not found.");
                return;
            }

            const printableInvoice = invoiceDetails.cloneNode(true);

            // Ensure dynamically injected content is updated
            printableInvoice.querySelectorAll('[id]').forEach((el) => {
                const originalEl = document.getElementById(el.id);
                if (originalEl) {
                    el.innerHTML = originalEl.innerHTML; // Sync dynamically loaded content
                }
            });

            // Add print-specific styles
            const style = document.createElement('style');
            style.textContent = `
        @media print {
            body * {
                visibility: hidden;
            }
            #printable-invoice, #printable-invoice * {
                visibility: visible;
            }
            #printable-invoice {
                position: absolute;
                left: 0;
                top: 0;
                width: 210mm;
                height: 297mm;
                padding: 20mm;
                font-size: 12pt;
            }
            @page {
                size: A4;
                margin: 0;
            }
        }
    `;
            printableInvoice.appendChild(style);

            // Create a wrapper div for print content
            const wrapper = document.createElement('div');
            wrapper.id = 'printable-invoice';
            wrapper.appendChild(printableInvoice);

            // Add to body for printing
            document.body.appendChild(wrapper);

            // Trigger print
            window.print();

            // Clean up after printing
            document.body.removeChild(wrapper);
        }

        // Fetch invoice data when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            fetchInvoiceData();

            // Attach event listener to the payment form
            const paymentForm = document.getElementById('payment-form');
            paymentForm.addEventListener('submit', handlePaymentFormSubmit);
        });


        // Function to create a printable version of the invoice
        function createPrintableInvoice() {
            const invoiceDetails = document.querySelector('.bg-white.p-6');
            const printableInvoice = invoiceDetails.cloneNode(true);

            // Remove unnecessary elements
            const elementsToRemove = printableInvoice.querySelectorAll('button, #payment-form-container');
            elementsToRemove.forEach(el => el.remove());

            // Add print styles
            const style = document.createElement('style');
            style.textContent = `
    @media print {
      body * {
        visibility: hidden;
      }
      #printable-invoice, #printable-invoice * {
        visibility: visible;
      }
      #printable-invoice {
        position: absolute;
        left: 0;
        top: 0;
        width: 210mm;
        height: 297mm;
        padding: 20mm;
        font-size: 12pt;
      }
      @page {
        size: A4;
        margin: 0;
      }
    }
  `;
            printableInvoice.appendChild(style);

            // Add overview section
            const overview = document.createElement('div');
            overview.innerHTML = `
    <h3 class="text-xl font-bold mt-4 mb-2">نظرة عامة على الفاتورة</h3>
    <p>إجمالي المبلغ: ${document.getElementById('invoice-total-value').textContent} د.ع</p>
    <p>المبلغ المدفوع: ${document.getElementById('invoice-paid-value').textContent} د.ع</p>
    <p>الرصيد المتبقي: ${document.getElementById('invoice-remaining-value').textContent} د.ع</p>
  `;
            printableInvoice.insertBefore(overview, printableInvoice.querySelector('h3'));

            return printableInvoice;
        }

        // Function to print individual payment rows
        function printPaymentRows() {
            const paymentRows = document.querySelectorAll('#payments-table-body tr');
            let printContent = '<h2>تفاصيل الدفعات</h2>';


        paymentRows.forEach((row, index) => {
            const cells = row.querySelectorAll("td");
            printContent += `
                <div style="page-break-inside: avoid;">
                    <h3>الدفعة ${index + 1}</h3>
                    <p>نوع الدفع: ${cells[0].textContent}</p>
                    <p>تاريخ الدفع: ${cells[1].textContent}</p>
                    <p>المبلغ: ${cells[2].textContent} د.ع</p>
                    <p>الحالة: ${cells[3].textContent}</p>
                </div>
            `;
        });

console.log(printContent);

            const printWindow = window.open('', '_blank');
            printWindow.document.write(`
    <html>
      <head>
        <title>تفاصيل الدفعات</title>
        <style>
          body { font-family: Arial, sans-serif; direction: rtl; }
          @media print {
            body { width: 210mm; height: 297mm; }
            @page { size: A4; margin: 20mm; }
          }
        </style>
      </head>
      <body>${printContent}</body>
    </html>
  `);
            printWindow.document.close();
            printWindow.print();
        }

        // Modify the existing printInvoice function
        // function printInvoice() {
        //     const printableInvoice = createPrintableInvoice();
        //     document.body.appendChild(printableInvoice);
        //     window.print();
        //     document.body.removeChild(printableInvoice);
        // }

        // Add event listeners when the DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            const printInvoiceButton = document.querySelector('button[onclick="printInvoice()"]');
            printInvoiceButton.onclick = printInvoice;

            const printPaymentsButton = document.createElement('button');
            printPaymentsButton.textContent = 'طباعة تفاصيل الدفعات';
            printPaymentsButton.className = 'bg-gray-800 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition-colors duration-200 mr-2';
            printPaymentsButton.onclick = printPaymentRows;

            printInvoiceButton.parentNode.insertBefore(printPaymentsButton, printInvoiceButton);
        });

        console.log('Invoice printer script loaded successfully.');

    </script>




    <%- include('../footer',{currentpage:'Installment'}); %>